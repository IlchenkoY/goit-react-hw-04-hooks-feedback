{"version":3,"sources":["components/Feedback/FeedbackOptons.styled.jsx","components/Feedback/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["Button","styled","button","props","eventOption","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","setTotal","percentage","setPercentage","useEffect","Math","round","evt","target","prevState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAEaA,E,KAASC,EAAOC,OAAV,6PAOK,SAAAC,GAClB,OAAQA,EAAMC,aACZ,IAAK,OACH,MAAO,QACT,IAAK,UACH,MAAO,SACT,IAAK,MACH,MAAO,MACT,QACE,MAAO,W,OCfXC,EAAkB,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,mCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,cAACT,EAAD,CACEU,KAAK,SAELC,KAAMF,EACNG,QAASL,EACTH,YAAaK,EALf,SAOGA,GALIA,SCPTI,EAAa,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,WCPAC,EAAU,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACGD,GAAS,6BAAKA,IACdC,MCJDC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCIPC,EAAM,WACV,MAAwBC,mBAAS,GAAjC,mBAAOX,EAAP,KAAaY,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOV,EAAP,KAAgBY,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOT,EAAP,KAAYY,EAAZ,KACA,EAA0BH,mBAAS,GAAnC,mBAAOR,EAAP,KAAcY,EAAd,KACA,EAAoCJ,mBAAS,GAA7C,mBAAOK,EAAP,KAAmBC,EAAnB,KA6BA,OAVAC,qBAAU,WAERH,EADcf,EAAOC,EAAUC,KAE9B,CAACF,EAAMC,EAASC,IAEnBgB,qBAAU,WACR,IAAMF,EAAaG,KAAKC,MAAc,IAAPpB,EAAcG,GAC7Cc,EAAcD,KACb,CAAChB,EAAMG,IAGR,qCACE,cAAC,EAAD,CAASG,MAAM,wBAAf,SACE,cAAC,EAAD,CACEd,QAAS,CAAC,OAAQ,UAAW,OAC7BC,gBAhCgB,SAAA4B,GACtB,OAAQA,EAAIC,OAAOzB,MACjB,IAAK,OACHe,GAAQ,SAAAW,GAAS,OAAIA,EAAY,KACjC,MACF,IAAK,UACHV,GAAW,SAAAU,GAAS,OAAIA,EAAY,KACpC,MACF,IAAK,MACHT,GAAO,SAAAS,GAAS,OAAIA,EAAY,KAChC,MAEF,QACE,aAuBF,cAAC,EAAD,CAASjB,MAAM,aAAf,SACGH,EAAQ,EACP,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBY,IAGtB,cAAC,EAAD,CAAcP,QAAQ,+BCtDhCe,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.7b003ec3.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nexport const Button = styled.button`\n  background-color: tomato;\n  border: 2px solid black;\n  border-radius: 5px;\n  padding-bottom: 4px;\n  &:hover {\n    cursor: pointer;\n    background-color: ${props => {\n      switch (props.eventOption) {\n        case 'good':\n          return 'green';\n        case 'neutral':\n          return 'yellow';\n        case 'bad':\n          return 'red';\n        default:\n          return '#000';\n      }\n    }};\n  }\n  &:not(:last-child) {\n    margin-right: 5px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { Button } from './FeedbackOptons.styled';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return (\n    <>\n      {options.map(option => (\n        <Button\n          type=\"button\"\n          key={option}\n          name={option}\n          onClick={onLeaveFeedback}\n          eventOption={option}\n        >\n          {option}\n        </Button>\n      ))}\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n\nexport { FeedbackOptions };\n","import PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive feedback: {positivePercentage}%</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport { Statistics };\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      {title && <h2>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n};\n\nexport { Section };\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n\nexport { Notification };\n","// import { Component } from 'react';\nimport { FeedbackOptions } from './components/Feedback/FeedbackOptions';\nimport { Statistics } from './components/Statistics/Statistics';\nimport { Section } from './components/Section/Section';\nimport { Notification } from './components/Notification/Notification';\nimport { useState, useEffect } from 'react';\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const [total, setTotal] = useState(0);\n  const [percentage, setPercentage] = useState(0);\n\n  const onLeaveFeedback = evt => {\n    switch (evt.target.name) {\n      case 'good':\n        setGood(prevState => prevState + 1);\n        break;\n      case 'neutral':\n        setNeutral(prevState => prevState + 1);\n        break;\n      case 'bad':\n        setBad(prevState => prevState + 1);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  useEffect(() => {\n    const total = good + neutral + bad;\n    setTotal(total);\n  }, [good, neutral, bad]);\n\n  useEffect(() => {\n    const percentage = Math.round((good * 100) / total);\n    setPercentage(percentage);\n  }, [good, total]);\n\n  return (\n    <>\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions\n          options={['good', 'neutral', 'bad']}\n          onLeaveFeedback={onLeaveFeedback}\n        />\n      </Section>\n\n      <Section title=\"Statistics\">\n        {total > 0 ? (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={percentage}\n          />\n        ) : (\n          <Notification message=\"There is no feedback\"></Notification>\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport { App };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'modern-normalize/modern-normalize.css';\nimport './index.css';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}